import groovy.json.JsonOutput
import groovy.json.JsonSlurper
import io.github.offz.githubPackage
import org.spongepowered.asm.gradle.plugins.struct.DynamicProperties

plugins {
    idea
    java
    id("io.github.0ffz.github-packages") version "1.2.1"
    id("net.minecraftforge.gradle") version "[6.0,6.2)"
    id("org.parchmentmc.librarian.forgegradle") version "1.+"
    id("org.spongepowered.mixin") version "0.7.+"
}

// Allows local configuration.
// Edit the generated `dev.gradle` file
//
// ext {
//     mappings_channel = "parchment"
//     mappings_version = "2023.09.03-1.20.1"
//     minify_resources = false
//     use_advanced_class_redefinition = true
// }
// Properties that can be configured are:
// "mappings_channel", "mappings_version" (suggested "parchment", "2023.09.03-1.20.1" respectivly)
// "minify_resources" (suggested `false` for faster build times)
// "use_advanced_class_redefinition" for the magic Jetbrains JDK hotswaps
file("./dev.gradle").createNewFile()
apply(from = "dev.gradle")

// MC version
val minecraftVersion = "1.20.1"
// Forge version
val forgeVersion = "47.1.3"

// Mod stuff
val modID = "sns"
val modName: String = "Sacks \'N Such"

// Dependency stuff
val lombokVersion = "1.18.32"
val jeiVersion = "15.2.0.21"
val patchouliVersion = "81"
val extendedSlotCapacityVersion = "1.2"
val curiosVersion = "5.9.0"
val jadeFileID = "4614153"
val tfcFileID = "5943050"

val mappingsChannel: String = project.findProperty("mappings_channel") as String? ?: "official"
val mappingsVersion: String = project.findProperty("mappings_version") as String? ?: minecraftVersion
val minifyResources: Boolean = project.findProperty("minify_resources") as Boolean? ?: true
val useAdvancedClassRedef: Boolean = project.findProperty("use_advanced_class_redefinition") as Boolean? ?: false

val modVersion: String = System.getenv("VERSION") ?: "0.0.0-indev"

base {
    archivesName.set("$modName-$minecraftVersion")
    group = "mod.traister101" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
    version = modVersion
}

java {
    // Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
    toolchain.languageVersion.set(JavaLanguageVersion.of(17))
}

println(
    "Java: ${System.getProperty("java.version")}, JVM: ${System.getProperty("java.vm.version")} (${System.getProperty("java.vendor")}), Arch: ${
        System.getProperty(
            "os.arch"
        )
    }"
)
println("Using mappings $mappingsChannel / $mappingsVersion with version $modVersion")

// Include resources generated by data generators
sourceSets {
    main {
        resources {
            srcDir("src/generated/resources")
        }
    }
    create("datagen")
}

configurations {
    get("datagenCompileClasspath").extendsFrom(compileClasspath.get())
    get("datagenRuntimeClasspath").extendsFrom(runtimeClasspath.get())
}

mixin {
    add(sourceSets.main.get(), "sacks-n-such.refmap.json")
    config("sacks-n-such.mixins.json")

    (debug as DynamicProperties).propertyMissing("verbose", true)
    (debug as DynamicProperties).propertyMissing("export", true)
    overwriteErrorLevel = "error"
    hotSwap = true
}

minecraft {
    mappings(mappingsChannel, mappingsVersion)

    runs {
        all {
            property("forge.logging.markers", "REGISTRIES")
            property("forge.logging.console.level", "debug")

            // Mixin is stupid
            property("mixin.env.remapRefMap", "true")
            property("mixin.env.refMapRemappingFile", "$projectDir/build/createSrgToMcp/output.srg")

            if (useAdvancedClassRedef) {
                jvmArg("-XX:+AllowEnhancedClassRedefinition")
            }

            mods.create(modID) {
                source(sourceSets.main.get())
            }
        }

        register("client") {
            workingDirectory(file("run/client"))

            jvmArgs("-ea", "-Xmx4G", "-Xms4G")

            property("forge.enabledGameTestNamespaces", modID)
        }

        register("server") {
            workingDirectory(file("run/server"))

            args("-nogui")
        }

        register("data") {
            workingDirectory(file("run/datagen"))

            ideaModule("${project.name.replace(' ', '_')}.datagen")

            mods.getByName(modID) {
                source(sourceSets["datagen"])
            }

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args(
                "--mod",
                modID,
                "--all",
                "--output",
                file("src/generated/resources/"),
                "--existing",
                file("src/main/resources/"),
                "--existing",
                file("resources/copied_images/"),
                "--input",
                file("resources/copied_images/"),
                "--existing-mod",
                "tfc"
            )
        }
    }
}

repositories {
    maven {
        name = "Curse maven"
        url = uri("https://www.cursemaven.com")
        content {
            includeGroup("curse.maven")
        }
    }
    maven {
        name = "BlameJared maven"
        url = uri("https://maven.blamejared.com/")
        content {
            includeGroup("mezz.jei")
            includeGroup("vazkii.patchouli")
        }
    }
    maven {
        name = "Illusive Soulworks maven"
        url = uri("https://maven.theillusivec4.top/")
        content {
            includeGroup("top.theillusivec4.curios")
        }
    }
    // Mirror for JEI and patchouli
    maven {
        name = "Mod maven"
        url = uri("https://modmaven.k-4u.nl")
        content {
            includeGroup("mezz.jei")
            includeGroup("vazkii.patchouli")
        }
    }
    // https://github.com/Traister101/ExtendedSlotCapacity
    githubPackage("traister101/ExtendedSlotCapacity") {
        name = "Extended Slot Capacity"
        content {
            includeGroup("mod.traister101")
        }
    }
}

dependencies {
    minecraft("net.minecraftforge", "forge", "$minecraftVersion-$forgeVersion")

    "datagenImplementation"(sourceSets["main"].output)

    // Lombok because yes
    compileOnly("org.projectlombok:lombok:$lombokVersion")
    annotationProcessor("org.projectlombok:lombok:$lombokVersion")

    // TFC
    implementation(fg.deobf("curse.maven:terrafirmacraft-302973:$tfcFileID"))

    annotationProcessor("org.spongepowered:mixin:0.8.5:processor")

    jarJar(implementation(fg.deobf("mod.traister101:Extended-Slot-Capacity-1.20.1:$extendedSlotCapacityVersion")) {
        jarJar.ranged(this, "[$extendedSlotCapacityVersion,)")
    })

    // Patchouli
    compileOnly(fg.deobf("vazkii.patchouli:Patchouli:$minecraftVersion-$patchouliVersion-FORGE:api"))
    runtimeOnly(fg.deobf("vazkii.patchouli:Patchouli:$minecraftVersion-$patchouliVersion-FORGE"))

    // Jade
    runtimeOnly(fg.deobf("curse.maven:jade-324717:$jadeFileID"))

    // JEI
    runtimeOnly(fg.deobf("mezz.jei:jei-$minecraftVersion-forge:$jeiVersion"))

    // Curios
    compileOnly(fg.deobf("top.theillusivec4.curios:curios-forge:$curiosVersion+$minecraftVersion:api"))
    runtimeOnly(fg.deobf("top.theillusivec4.curios:curios-forge:$curiosVersion+$minecraftVersion"))
}

idea {
    module {
        isDownloadJavadoc = true
        isDownloadSources = true

        // Add directory exlusions
        val exludes = arrayOf(
            "run",
            ".gradle",
            "build",
            ".idea",
            "gradle",
            "src/generated/resources/.cache",
            "resources/models",
            "resources/.idea"
        ).map { file(it) }
        excludeDirs.addAll(exludes)
    }
}

tasks {

    jar {
        from(sourceSets["datagen"].output)
        manifest {
            attributes["Specification-Title"] = modName
            attributes["Specification-Vendor"] = "traister101"
            attributes["Specification-Version"] = project.version
            attributes["Implementation-Title"] = project.name
            attributes["Implementation-Version"] = project.version
            attributes["Implementation-Vendor"] = "traister101"
        }
        finalizedBy("reobfJar")
    }

    processResources {
        if (minifyResources) {
            doLast {
                val jsonMinifyStart: Long = System.currentTimeMillis()
                var jsonMinified: Long = 0
                var jsonBytesBefore: Long = 0
                var jsonBytesAfter: Long = 0

                fileTree(mapOf("dir" to outputs.files.asPath, "include" to "**/*.json")).forEach {
                    jsonMinified++
                    jsonBytesBefore += it.length()
                    try {
                        it.writeText(JsonOutput.toJson(JsonSlurper().parse(it)))
                    } catch (e: Exception) {
                        println("JSON Error in ${it.path}")
                        throw e
                    }

                    jsonBytesAfter += it.length()
                }
                println("Minified $jsonMinified json files. Reduced ${jsonBytesBefore / 1024} kB to ${(jsonBytesAfter / 1024)} kB. Took ${System.currentTimeMillis() - jsonMinifyStart} ms")
            }
        }
    }

    withType<JavaCompile>().configureEach {
        options.encoding = "UTF-8"
        options.compilerArgs.addAll(arrayOf("-Xlint:all,-processing", "-Werror"))
    }
}